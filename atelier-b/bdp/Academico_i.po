THEORY ProofList IS
_f(1) & _f(6) & _f(7) & _f(31) & _f(32) & doTest.4,(_f(34) & _f(64) & _f(65) & _f(66) & _f(63) & _f(8) & _f(29) => _f(68));
_f(1) & _f(6) & _f(7) & _f(31) & _f(32) & doTest.3,(_f(34) & _f(64) & _f(65) & _f(66) & _f(63) & _f(8) & _f(17) => _f(67));
_f(1) & _f(6) & _f(7) & _f(31) & _f(32) & doTest.2,(_f(34) & _f(64) & _f(65) & _f(66) & _f(62) & _f(8) & _f(29) => _f(68));
_f(1) & _f(6) & _f(7) & _f(31) & _f(32) & doTest.1,(_f(34) & _f(64) & _f(65) & _f(66) & _f(62) & _f(8) & _f(17) => _f(67));
_f(1) & _f(6) & _f(7) & _f(31) & _f(32) & registerStudent.2,(_f(34) & _f(36) & _f(47) & _f(57) & _f(58) & _f(8) & _f(27) => _f(60));
_f(1) & _f(6) & _f(7) & _f(31) & _f(32) & registerStudent.1,(_f(34) & _f(36) & _f(47) & _f(57) & _f(58) & _f(8) & _f(15) => _f(59));
_f(1) & _f(6) & _f(7) & _f(31) & _f(32) & addSubjectToCourse.2,(_f(52) & _f(47) & _f(53) & _f(8) & _f(25) => _f(55));
_f(1) & _f(6) & _f(7) & _f(31) & _f(32) & addSubjectToCourse.1,(_f(52) & _f(47) & _f(53) & _f(8) & _f(13) => _f(54));
_f(1) & _f(6) & _f(7) & _f(31) & _f(32) & addCourse.2,(_f(47) & _f(48) & _f(8) & _f(23) => _f(50));
_f(1) & _f(6) & _f(7) & _f(31) & _f(32) & addCourse.1,(_f(47) & _f(48) & _f(8) & _f(11) => _f(49));
_f(1) & _f(6) & _f(7) & _f(31) & _f(32) & addTeacher.2,(_f(40) & _f(41) & _f(8) & _f(44) => _f(45));
_f(1) & _f(6) & _f(7) & _f(31) & _f(32) & addTeacher.1,(_f(40) & _f(41) & _f(8) & _f(42) => _f(43));
_f(1) & _f(6) & _f(7) & _f(31) & _f(32) & addStudent.2,(_f(34) & _f(35) & _f(36) & _f(8) & _f(21) => _f(38));
_f(1) & _f(6) & _f(7) & _f(31) & _f(32) & addStudent.1,(_f(34) & _f(35) & _f(36) & _f(8) & _f(9) => _f(37));
_f(1) & _f(6) & _f(7) & Initialisation.11,(_f(8) & _f(29) => _f(30));
_f(1) & _f(6) & _f(7) & Initialisation.10,(_f(8) & _f(27) => _f(28));
_f(1) & _f(6) & _f(7) & Initialisation.9,(_f(8) & _f(25) => _f(26));
_f(1) & _f(6) & _f(7) & Initialisation.8,(_f(8) & _f(23) => _f(24));
_f(1) & _f(6) & _f(7) & Initialisation.7,(_f(8) & _f(21) => _f(22));
_f(1) & _f(6) & _f(7) & Initialisation.6,(_f(8) & _f(19) => _f(20));
_f(1) & _f(6) & _f(7) & Initialisation.5,(_f(8) & _f(17) => _f(18));
_f(1) & _f(6) & _f(7) & Initialisation.4,(_f(8) & _f(15) => _f(16));
_f(1) & _f(6) & _f(7) & Initialisation.3,(_f(8) & _f(13) => _f(14));
_f(1) & _f(6) & _f(7) & Initialisation.2,(_f(8) & _f(11) => _f(12));
_f(1) & _f(6) & _f(7) & Initialisation.1,(_f(8) & _f(9) => _f(10));
_f(1) & ValuesLemmas.3,(_f(2) => _f(5));
_f(1) & ValuesLemmas.2,(_f(2) => _f(4));
_f(1) & ValuesLemmas.1,(_f(2) => _f(3))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483647) .. (2147483647))));
"Valuation is correct";
((0) .. (20)): FIN(INTEGER) & not(((0) .. (20)) = {});
((1..2)*{STATUS}): FIN(NATURAL*{STATUS}) & not(((1..2)*{STATUS}) = {});
((0) .. (1)): FIN(INTEGER) & not(((0) .. (1)) = {});
PERSON: FIN(INTEGER) & not(PERSON = {}) & ((1..2)*{STATUS}): FIN(NATURAL*{STATUS}) & not(((1..2)*{STATUS}) = {}) & COURSE: FIN(INTEGER) & not(COURSE = {}) & SUBJECT: FIN(INTEGER) & not(SUBJECT = {}) & Bool: FIN(INTEGER) & not(Bool = {});
((PERSON) = (((0) .. (20)))) & ((COURSE) = (((0) .. (20)))) & ((SUBJECT) = (((0) .. (20)))) & ((Bool) = (((0) .. (1))));
"Refinement is correct";
"Check invariant ((student_i$1) : (((PERSON) --> (Bool))))";
(((PERSON * {0})) : (((PERSON) --> (Bool))));
"Check invariant ((course_i$1) : (((COURSE) --> (Bool))))";
(((COURSE * {0})) : (((COURSE) --> (Bool))));
"Check invariant ((course_subject_list_i$1) : ((((COURSE * SUBJECT)) --> (Bool))))";
((((COURSE * SUBJECT) * {0})) : ((((COURSE * SUBJECT)) --> (Bool))));
"Check invariant ((student_list_course_i$1) : ((((PERSON * COURSE)) --> (Bool))))";
((((PERSON * COURSE) * {0})) : ((((PERSON * COURSE)) --> (Bool))));
"Check invariant ((test_list_i$1) : ((((PERSON * SUBJECT)) --> (Bool))))";
((((PERSON * SUBJECT) * {0})) : ((((PERSON * SUBJECT)) --> (Bool))));
"Check invariant ((student_grade_sum_i$1) : ((((PERSON * NATURAL)) --> (Bool))))";
((((PERSON * NATURAL) * {0})) : ((((PERSON * NATURAL)) --> (Bool))));
"Check invariant ((((student_i$1)~ )[{1}]) = (student))";
(((((PERSON * {0}))~ )[{1}]) = ({}));
"Check invariant ((((course_i$1)~ )[{1}]) = (course))";
(((((COURSE * {0}))~ )[{1}]) = ({}));
"Check invariant ((((course_subject_list_i$1)~ )[{1}]) = (course_subject_list))";
((((((COURSE * SUBJECT) * {0}))~ )[{1}]) = ({}));
"Check invariant ((((student_list_course_i$1)~ )[{1}]) = (student_list_course))";
((((((PERSON * COURSE) * {0}))~ )[{1}]) = ({}));
"Check invariant ((((test_list_i$1)~ )[{1}]) = (test_list))";
((((((PERSON * SUBJECT) * {0}))~ )[{1}]) = ({}));
student : POW( PERSON) & teacher : POW( PERSON) & ((((student) /\ (teacher))) = ({})) & course : POW( COURSE) & ((course_subject_list) : (((COURSE) <-> (SUBJECT)))) & ((student_list_course) : (((PERSON) <-> (COURSE)))) & ((test_list) : (((PERSON) <-> (SUBJECT)))) & ((student_grade_sum) : (((PERSON) <-> (NATURAL))));
student_i$1 : PERSON +-> Bool & dom(student_i$1) = PERSON & ((student_i$1) : (((PERSON) --> (Bool)))) & teacher_i$1 : PERSON +-> Bool & dom(teacher_i$1) = PERSON & ((teacher_i$1) : (((PERSON) --> (Bool)))) & course_i$1 : COURSE +-> Bool & dom(course_i$1) = COURSE & ((course_i$1) : (((COURSE) --> (Bool)))) & course_subject_list_i$1 : (COURSE * SUBJECT) +-> Bool & dom(course_subject_list_i$1) = (COURSE * SUBJECT) & ((course_subject_list_i$1) : ((((COURSE * SUBJECT)) --> (Bool)))) & student_list_course_i$1 : (PERSON * COURSE) +-> Bool & dom(student_list_course_i$1) = (PERSON * COURSE) & ((student_list_course_i$1) : ((((PERSON * COURSE)) --> (Bool)))) & test_list_i$1 : (PERSON * SUBJECT) +-> Bool & dom(test_list_i$1) = (PERSON * SUBJECT) & ((test_list_i$1) : ((((PERSON * SUBJECT)) --> (Bool)))) & student_grade_sum_i$1 : (PERSON * NATURAL) +-> Bool & dom(student_grade_sum_i$1) = (PERSON * NATURAL) & ((student_grade_sum_i$1) : ((((PERSON * NATURAL)) --> (Bool)))) & ((((student_i$1)~ )[{1}]) = (student)) & ((((teacher_i$1)~ )[{1}]) = (teacher)) & ((((course_i$1)~ )[{1}]) = (course)) & ((((course_subject_list_i$1)~ )[{1}]) = (course_subject_list)) & ((((student_list_course_i$1)~ )[{1}]) = (student_list_course)) & ((((test_list_i$1)~ )[{1}]) = (test_list));
((ss) : (PERSON)) & not(ss : student) & not(ss : teacher);
((ss) : (PERSON));
not(ss : student);
not(ss : teacher);
((((student_i$1) <+ ({((ss) |-> (1))}))) : (((PERSON) --> (Bool))));
((((((student_i$1) <+ ({((ss) |-> (1))})))~ )[{1}]) = (((student) \/ ({ss}))));
((tt) : (PERSON)) & not(tt : student);
((tt) : (PERSON));
not(tt : student);
"Check invariant ((teacher_i$1) : (((PERSON) --> (Bool))))";
((((teacher_i$1) <+ ({((tt) |-> (1))}))) : (((PERSON) --> (Bool))));
"Check invariant ((((teacher_i$1)~ )[{1}]) = (teacher))";
((((((teacher_i$1) <+ ({((tt) |-> (1))})))~ )[{1}]) = (((teacher) \/ ({tt}))));
((cc) : (COURSE)) & not(cc : course);
((cc) : (COURSE));
not(cc : course);
((((course_i$1) <+ ({((cc) |-> (1))}))) : (((COURSE) --> (Bool))));
((((((course_i$1) <+ ({((cc) |-> (1))})))~ )[{1}]) = (((course) \/ ({cc}))));
((ss) : (SUBJECT)) & ((cc) : (COURSE)) & not(ss : ran(course_subject_list));
((ss) : (SUBJECT));
not(ss : ran(course_subject_list));
((((course_subject_list_i$1) <+ ({((((ss) |-> (cc))) |-> (1))}))) : ((((COURSE * SUBJECT)) --> (Bool))));
((((((course_subject_list_i$1) <+ ({((((ss) |-> (cc))) |-> (1))})))~ )[{1}]) = (((course_subject_list) \/ ({((cc) |-> (ss))}))));
((ss) : (PERSON)) & not(ss : teacher) & ((cc) : (COURSE)) & not(ss : dom(student_list_course)) & ((cc) : (dom(course_subject_list)));
not(ss : dom(student_list_course));
((cc) : (dom(course_subject_list)));
((((student_list_course_i$1) <+ ({((((ss) |-> (cc))) |-> (1))}))) : ((((PERSON * COURSE)) --> (Bool))));
((((((student_list_course_i$1) <+ ({((((ss) |-> (cc))) |-> (1))})))~ )[{1}]) = (((student_list_course) \/ ({((ss) |-> (cc))}))));
((ss) : (PERSON)) & ((ss) : (dom(student_list_course))) & ((ss2) : (SUBJECT)) & ((ss2) : (ran(((ran((({ss}) <| (student_list_course)))) <| (course_subject_list)))));
not(ss : dom(student_grade_sum));
not(not(ss : dom(student_grade_sum)));
((ss) : (dom(student_list_course)));
((ss2) : (SUBJECT));
((ss2) : (ran(((ran((({ss}) <| (student_list_course)))) <| (course_subject_list)))));
((((test_list_i$1) <+ ({((((ss) |-> (ss2))) |-> (1))}))) : ((((PERSON * SUBJECT)) --> (Bool))));
((((((test_list_i$1) <+ ({((((ss) |-> (ss2))) |-> (1))})))~ )[{1}]) = (((test_list) \/ ({((ss) |-> (ss2))}))));
((((student_list_course_i$1)~ )[{1}]) = (student_list_course));
((((course_subject_list_i$1)~ )[{1}]) = (course_subject_list));
((((course_i$1)~ )[{1}]) = (course));
((((teacher_i$1)~ )[{1}]) = (teacher));
((((student_i$1)~ )[{1}]) = (student));
student_grade_sum_i$1 : (PERSON * NATURAL) +-> Bool;
dom(student_grade_sum_i$1) = (PERSON * NATURAL);
((student_grade_sum_i$1) : ((((PERSON * NATURAL)) --> (Bool))));
test_list_i$1 : (PERSON * SUBJECT) +-> Bool;
dom(test_list_i$1) = (PERSON * SUBJECT);
((test_list_i$1) : ((((PERSON * SUBJECT)) --> (Bool))));
student_list_course_i$1 : (PERSON * COURSE) +-> Bool;
dom(student_list_course_i$1) = (PERSON * COURSE);
((student_list_course_i$1) : ((((PERSON * COURSE)) --> (Bool))));
course_subject_list_i$1 : (COURSE * SUBJECT) +-> Bool;
dom(course_subject_list_i$1) = (COURSE * SUBJECT);
((course_subject_list_i$1) : ((((COURSE * SUBJECT)) --> (Bool))));
course_i$1 : COURSE +-> Bool;
dom(course_i$1) = COURSE;
((course_i$1) : (((COURSE) --> (Bool))));
teacher_i$1 : PERSON +-> Bool;
dom(teacher_i$1) = PERSON;
((teacher_i$1) : (((PERSON) --> (Bool))));
student_i$1 : PERSON +-> Bool;
dom(student_i$1) = PERSON;
((student_i$1) : (((PERSON) --> (Bool))))
END
&
THEORY EnumerateX IS
STATUS == {Approved,Failed}
END
